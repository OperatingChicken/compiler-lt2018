import java_cup.runtime.*;
import java.util.ArrayList;

class Parser;

terminal NEWLINE, LINEWRAP, INPUT, OUTPUT, OUTPUT_NEWLINE, LOOP, END_LOOP;
terminal ADD, SUB, MUL, DIV, MOD, EQUALS, QUESTION_MARK, COLON, LPAREN, RPAREN;
terminal Long NUM_LITERAL;
terminal String STRING_LITERAL, IDENTIFIER;

non terminal ArrayList<Stmt> program, stmtList;
non terminal Stmt stmt, assignStmt, outputStmt, loopStmt;
non terminal Expr expr;
non terminal newLine;

precedence left ADD, SUB;
precedence left MUL, DIV, MOD;

start with program;

program ::= stmtList:stmts {: RESULT = stmts; :};

stmtList ::= stmt:stmt newLine {: RESULT = new ArrayList<Stmt>(); RESULT.add(stmt); :}
    | stmtList:stmts stmt:stmt newLine {: stmts.add(stmt); RESULT = stmts; :};

stmt ::= assignStmt:stmt {: RESULT = stmt; :}
    | outputStmt
    | loopStmt;

assignStmt ::= IDENTIFIER:id EQUALS expr:e {: RESULT = new AssignStmt(id, e); :};

outputStmt ::= OUTPUT STRING_LITERAL expr
    | OUTPUT STRING_LITERAL
    | OUTPUT expr
    | OUTPUT_NEWLINE;

loopStmt ::= LOOP expr newLine stmtList END_LOOP;

expr ::= NUM_LITERAL:n {: RESULT = new NumLiteralExpr(n); :}
    | IDENTIFIER:id {: RESULT = new IdentifierExpr(id); :}
    | expr:l ADD expr:r {: RESULT = new AddExpr(l, r); :}
    | expr:l SUB expr:r {: RESULT = new SubExpr(l, r); :}
    | expr:l MUL expr:r {: RESULT = new MulExpr(l, r); :}
    | expr:l DIV expr:r {: RESULT = new DivExpr(l, r); :}
    | expr:l MOD expr:r {: RESULT = new ModExpr(l, r); :}
    | INPUT
    | INPUT STRING_LITERAL;

newLine ::= NEWLINE;