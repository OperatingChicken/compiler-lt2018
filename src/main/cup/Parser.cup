import ast.expressions.*;
import ast.statements.*;
import err.ParseError;
import java.util.List;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.*;

class Parser;

parser code {:
    private List<Integer> expectedTokenIds;
    @Override
    public void report_fatal_error(String message, Object info) throws ParseError {
        done_parsing();
        ComplexSymbol sym = (ComplexSymbol) cur_token;
        if (expectedTokenIds == null) {
            throw new ParseError(sym.getLeft().getLine(), sym.getLeft().getColumn());
        } else {
            String expectedTokens = expectedTokenIds.stream().map(this::symbl_name_from_id).collect(Collectors.joining(", "));
            throw new ParseError(sym.getLeft().getLine(), sym.getLeft().getColumn(), expectedTokens);
        }
    }
    @Override
    public void syntax_error(Symbol cur_token) {
        expectedTokenIds = expected_token_ids();
    }
    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws ParseError {
        report_fatal_error("", cur_token);
    }
:}

terminal NEWLINE, INPUT, OUTPUT, OUTPUT_NEWLINE, LOOP, END_LOOP;
terminal ADD, SUB, MUL, DIV, MOD, EQUALS, QUESTION_MARK, COLON, LPAREN, RPAREN, UNARY;
terminal Long NUM_LITERAL;
terminal String STRING_LITERAL, IDENTIFIER;

non terminal StmtList program, stmtList;
non terminal Stmt stmt, assignStmt, outputStmt, loopStmt;
non terminal Expr expr;
non terminal newLine;

precedence right EQUALS;
precedence right QUESTION_MARK;
precedence left ADD, SUB;
precedence left MUL, DIV, MOD;
precedence right UNARY;

start with program;

program ::= stmtList:stmts {: RESULT = stmts; :};

stmtList ::= stmt:stmt newLine {: RESULT = new StmtList(stmt); :}
    | stmtList:stmts stmt:stmt newLine {: stmts.add(stmt); RESULT = stmts; :};

stmt ::= assignStmt:stmt {: RESULT = stmt; :}
    | outputStmt:stmt {: RESULT = stmt; :}
    | loopStmt:stmt {: RESULT = stmt; :};

assignStmt ::= IDENTIFIER:id EQUALS expr:e {: RESULT = new AssignStmt(id, e); :};

outputStmt ::= OUTPUT STRING_LITERAL:l expr:e {: RESULT = new OutputStmt(l, e); :}
    | OUTPUT STRING_LITERAL:l {: RESULT = new OutputStmt(l); :}
    | OUTPUT expr:e {: RESULT = new OutputStmt(e); :}
    | OUTPUT_NEWLINE {: RESULT = new OutputStmt(); :};

loopStmt ::= LOOP expr:condition newLine stmtList:body END_LOOP {: RESULT = new LoopStmt(condition, body); :};

expr ::= NUM_LITERAL:n {: RESULT = new NumLiteralExpr(n); :}
    | IDENTIFIER:id {: RESULT = new IdentifierExpr(id); :}
    | expr:l ADD expr:r {: RESULT = new AddExpr(l, r); :}
    | expr:l SUB expr:r {: RESULT = new SubExpr(l, r); :}
    | expr:l MUL expr:r {: RESULT = new MulExpr(l, r); :}
    | expr:l DIV expr:r {: RESULT = new DivExpr(l, r); :}
    | expr:l MOD expr:r {: RESULT = new ModExpr(l, r); :}
    | SUB expr:e {: RESULT = new NegExpr(e); :} %prec UNARY
    | ADD expr:e {: RESULT = e; :} %prec UNARY
    | LPAREN expr:e RPAREN {: RESULT = e; :}
    | IDENTIFIER:id EQUALS expr:e {: RESULT = new AssignExpr(id, e); :}
    | expr:cond QUESTION_MARK expr:ifTrue COLON expr:ifFalse {: RESULT = new IfExpr(cond, ifTrue, ifFalse); :}
    | INPUT {: RESULT = new InputExpr(); :}
    | INPUT STRING_LITERAL:prompt {: RESULT = new InputExpr(prompt); :};

newLine ::= NEWLINE;